{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        #kanban-project {
            overflow-x: auto;
            padding: 20px 0;
        }

        .success {
            background: #00b961;
        }

        .info {
            background: #2a92bf;
        }

        .warning {
            background: #f4ce46;
        }

        .error {
            background: #fb7d44;
        }

        .custom-button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 7px 15px;
            margin: 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
        }      
    </style> 
{% endblock %}

{% block title %}Projet{% endblock %}
 
{% block body %}
<div class="py-4">
    <h4>Projet</h4>
    <div class="mb-2">
        <a href="{{ path('app_project_index') }}" class="btn btn-outline-primary">Retour à la liste</a>
        <a href="{{ path('app_project_edit', {'id': project.id}) }}" class="btn btn-outline-secondary">Modifier</a>
        {{ include('project/_delete_form.html.twig', { buttonClass: 'btn-outline-danger' }) }}
    </div>
    <div class="card">
        <div class="card-body">
            <table class="table">
                <tbody>
                    <tr>
                        <th>#</th>
                        <td>{{ project.id }}</td>
                    </tr>
                    <tr>
                        <th>Nom</th>
                        <td>{{ project.name }}</td>
                    </tr>
                    <tr>
                        <th>Desription</th>
                        <td>{{ project.description|nl2br }}</td>
                    </tr>
                    <tr>
                        <th>Client</th>
                        <td>{{ project.client ? project.client.name : 'Pas de client' }}</td>
                    </tr>
                    <tr>
                        <th>Status</th>
                        <td>{{ project.status.name }}</td>
                    </tr>
                    <tr>
                        <th>Date de début</th>
                        <td>{{ project.startDate ? project.startDate|date('Y-m-d H:i:s') : '' }}</td>
                    </tr>
                    <tr>
                        <th>Date de fin</th>
                        <td>{{ project.endDate ? project.endDate|date('Y-m-d H:i:s') : '' }}</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <hr>
    <h4>Assigned Task:</h4>

    <div class="row bg-white rounded p-3">
        <div class="col-6">
            {% if tasks is not empty  %}
                <div class="list-group">
                    {% for task in tasks %}
                        <label class="list-group-item">
                            <input class="form-check-input me-1" readonlyvalue="" type="checkbox" {% if task.status.code == "FINISH" %} checked {% endif %} />
                            {{ task.title }}
                        </label>
                    {% endfor %}
                </div>
            {% else %}
                <div class="alert alert-secondary">no task assignedt</div>
            {% endif %}
        </div>
    </div>

    

    
    <hr>
    <h4>Suivi des tâches:</h4>
    <div class="d-flex justify-content-center align-items-center">
      <div id="kanban-project"></div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', async () => {

            const formatTask = (task) => {
                return `
                    <p><span class="badge text-bg-secondary">${task.user.username}</span></p>
                    <p>${task.title}</p>
                `
            }
        
            const statuses = await fetch('{{path('app_status_json')}}')
                .then(res => res.json())
                .then(res => res.statuses)

            const tasks = await fetch('{{path('app_project_tasks_kanban', {id: project.id})}}')
                .then(res => res.json())
                .then(res => res.tasks)

            const boards = await Promise.all(statuses.map(async (sts) => {
                return {
                    id: `${sts.id}_${sts.code}`,
                    title: sts.name,
                    class: 'bg-' + sts.color + ',text-black',
                    item: [
                        ...tasks.filter(task => task.status.id === sts.id).map(task => {
                            return {
                                ...task,
                                title: formatTask(task),
                                status: `${task.status.id}_${task.status.code}`,
                                user: task.user.username
                            }
                        })
                    ]
                }
            }))

            const kanban = new jKanban({
                element: "#kanban-project",
                /*itemHandleOptions: {
                    enabled: true,
                },*/
                click: function(el) {
                    console.log('Click item')
                    console.log(Object.assign({}, el.dataset));
                },
                dropEl: async (el, target, source, sibling) => {
                    console.log('Drop element')
                    toastr.options = {
                        "positionClass": "toast-bottom-right"
                    }
                    const task = Object.assign({}, el.dataset)

                    const status = await fetch('{{ path('app_task_change_status') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            id: task.eid, 
                            status_id: target.parentNode.dataset.id.split('_')[0]
                        })
                    })
                    .then(res => res.json())
                    .then(res => {
                        if(undefined !== res.status) {
                            toastr.info(res.message, 'Notification de tâche')
                        } else {
                            toastr.success(res.message, 'Notification de tâche')
                        }
                    })

                    if(status === false) {
                        console.log(status)
                        kanban.drake.cancel(true)
                    }

                    return status
                },
                buttonClick: function(el, boardId) {
                    console.log({el, boardId})
                    // create a form to enter element
                    const formItem = document.createElement("form");
                    formItem.setAttribute("class", "itemform");
                    formItem.innerHTML = `
                        <div class="form-group mb-2">
                            <input class="form-control" autofocus>
                        </div>
                        <div class="form-group">
                            <button type="submit" class="btn btn-primary btn-xs pull-right">Submit</button>
                            <button type="button" class="btn btn-secondary btn-cancel">Cancel</button>
                        </div>
                    `;

                    kanban.addForm(boardId, formItem);

                    formItem.addEventListener("submit", function(e) {
                        e.preventDefault();
                        const text = e.target[0].value;
                        kanban.addElement(boardId, {
                            title: text
                        });
                        formItem.remove();
                    });

                    formItem.querySelector(':scope .btn-cancel')
                        .addEventListener('click', () => {
                            formItem.remove();
                    });
                },
                itemAddOptions: {
                    enabled: true,
                    content: '+ Ajouter une tâche',
                    class: 'custom-button',
                    footer: true
                },
                boards
            });
        });
    </script>
{% endblock %}